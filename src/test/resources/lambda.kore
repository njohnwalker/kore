[]

module LAMBDA

  sort Exp{} []

  symbol lambda0{}(Exp{},Exp{}) : Exp{} []

  symbol app{}(Exp{},Exp{}) : Exp{} []

  symbol lambda{}(Exp{},Exp{}) : Exp{} []

  axiom{R}
    \equals{Exp{},R}(
      lambda{}(
        #variableAsPattern{}(#X:#Variable{}),
        #E:#Pattern{}),
      #\exists{}(#Exp:#Sort{},
        #X:#Variable{},
        lambda0{}(
          #variableAsPattern{}(#X:#Variable{}),
          #E:#Pattern{}))) []

  symbol #isExp{#S}(#Pattern{}) : #S []

  axiom{#S,#R}
    \equals{#S,#R}(
      #isExp{#S}(#variableAsPattern{}(#variable{}(#NAME:#String{},#SORT:#Sort{}))),
      \equals{#Sort{},#S}(#SORT:#Sort{}, #`Exp{}())) []


  axiom{#S,#R}
    \equals{#S,#R}(
      #isExp{#S}(app{}(#E1:#Pattern{},#E2:#Pattern{})),
      \and{#S}(
        #isExp{#S}(#E1:#Pattern{}),
        #isExp{#S}(#E2:#Pattern{}))) []

  axiom{#S,#R}
    \equals{#S,#R}(
      #isExp{#S}(
        lambda{}(
          #variableAsPattern{}(
            #variable{}(#NAME:#String{},#SORT:#Sort{})),
            #E:#Pattern{})),
      \and{#S}(
        \equals{#Sort{},#S}(#SORT:#Sort{}, #`Exp{}()),
        #isExp{#S}(#E:#Pattern{}))) []

  axiom{#S,S}
    \implies{#S}(
      #isExp{#S}(
        app{}(
          lambda{}(X:Exp{}, #E:#Pattern{}),
          #E':#Pattern{})),
      #provable{#S}(
        \equals{Exp{},S}(
          app{}(
            lambda{}(X:Exp{},#E:#Pattern{}),
            #E':#Pattern{}),
          #substitute{}(
            #E:#Pattern{}, 
            #E':#Pattern{}, 
            #variable{}("X", #`Exp{}()))))) []




endmodule []
